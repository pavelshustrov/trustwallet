// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	model "trustwallet/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// AddAddress provides a mock function with given fields: address
func (_m *Storage) AddAddress(address model.Address) error {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for AddAddress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Address) error); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTransaction provides a mock function with given fields: address, tx
func (_m *Storage) AddTransaction(address model.Address, tx model.Transaction) error {
	ret := _m.Called(address, tx)

	if len(ret) == 0 {
		panic("no return value specified for AddTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Address, model.Transaction) error); ok {
		r0 = rf(address, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransactions provides a mock function with given fields: address
func (_m *Storage) GetTransactions(address model.Address) ([]model.Transaction, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Address) ([]model.Transaction, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(model.Address) []model.Transaction); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsSubscribed provides a mock function with given fields: address
func (_m *Storage) IsSubscribed(address model.Address) (bool, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for IsSubscribed")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Address) (bool, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(model.Address) bool); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(model.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
